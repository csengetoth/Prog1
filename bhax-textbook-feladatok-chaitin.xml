<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Chaitin!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Iteratív és rekurzív faktoriális Lisp-ben</title>
        <para>
            Ebben a feladatban egy olyan programot kellett készítenünk, amely meghatározza egy szám faktoriálisát. Faktoriálisnak nevezzük a matematikában egy n nemnegatív egész szám, n-nél kisebb vagy egyenlő pozitív egész számok szorzatát (Jelölése: n!).Ezt a programot iteratív és rekurzív módon is meg kellett valósítani Lisp-ben. 
        </para>
        <para>
            <command>Factoriális iteratívan</command>
        </para>
        <para>
            Elsönek itt láthatjuk az iteratív megoldásunkat amit egy for loop-al oldottunk meg.Láthatjuk, hogy z-nek bekérünk egy számot aminek a faktoriálisát meg akarjuk tudni.Itt még definiáltunk egy y-t is amiben a megoldásunkat fogjuk tárolni. Ezután inditunk egy for ciklust ami 1-től z-ig össze fogja szorozni a számokat amit eltárolunk y-ban.Végül princ paranccsal kiíratjuk y-t ami a bekért számuk faktoriálisa lesz.               
        </para>
        <programlisting><![CDATA[
(princ "Szam: ")
(setq z (read))
(setq y 1)
(loop for x from 1 to z
    do (setq y (* y x))
        )
(princ y)
]]>
            </programlisting>
        
        <para>
            <command>Factoriális rekurzívan</command>
        </para>
        <para>
            A rekurzív megvalósításban elsőnek írtunk egy factorial nevű függvényt.Ez maga nem olyan bonyolult, mindössze egy if-es eldöntésből áll. ha a szam kisebb mint 2 akkor a faktoriálisunk 1 lesz. Ellenkező esetben visszont a szam változótt megszoroza azzal a számal amit a factorial függvény fog vissza adni a (szam - 1)-re. Ezen a ponton láthatjuk, hogy ez egy rekurzív függvény mivel a végrehajtás során önmagát hívja meg.A függvény megírása után nincs más dolgunk csak bekérünk egy számot z néven, majd egy kiíratáson belül meghívjuk rá a factorial függvényt. Ez vissza is fogja adni a bekért szám faktoriálisát.               
        </para>
        <programlisting><![CDATA[
(defun factorial(szam)
    (if (< szam 2)
    1
    (* szam (factorial ( - szam 1))))
    )
(princ "Szam: ")
(setq z (read))

(princ (factorial z))
]]>
            </programlisting>
    </section>               

    <section>
        <title>Gimp Scheme Script-fu: króm effekt</title>
        <para>
            A feladatunk az volt, hogy írjunk olyan script-fukiterjesztést a GIMP programhoz, amely megvalósítja a króm effektet egy bemenő szövegre!
        </para>
        
        <para> 
            Elöször létrehozunk egy 8 elemből álló tömböt egy függvény segitségével amelynek beállítjuk az értékeit.  
        </para>
        <programlisting><![CDATA[
            (define (color-curve)
    (let* (
        (tomb (cons-array 8 'byte))
    )
        (aset tomb 0 0)
        (aset tomb 1 0)
        (aset tomb 2 50)
        (aset tomb 3 190)
        (aset tomb 4 110)
        (aset tomb 5 20)
        (aset tomb 6 200)
        (aset tomb 7 190)
    tomb)    
)]]>
        </programlisting>
        <para> 
            Ennek a definenak a segitségével tudjuk majd elérni a lista x-edik elemét.
        </para>
        <programlisting><![CDATA[

(define (elem x lista)

    (if (= x 1) (car lista) (elem (- x 1) ( cdr lista ) ) )

)]]>
        </programlisting>
        <para> 
            A következő kodrész felel a kép megformázásért.
        </para>
        <programlisting><![CDATA[

(define (text-wh text font fontsize)
(let*
    (
        (text-width 1)
        (text-height 1)
    )
 
    (set! text-width (car (gimp-text-get-extents-fontname text fontsize PIXELS font)))    
    (set! text-height (elem 2  (gimp-text-get-extents-fontname text fontsize PIXELS font)))    
    
    (list text-width text-height)
    )
)



(define (script-fu-bhax-chrome-border text font fontsize width height new-width color gradient border-size)
(let*
    (
        (text-width (car (text-wh text font fontsize)))
        (text-height (elem 2 (text-wh text font fontsize)))
        (image (car (gimp-image-new width (+ height (/ text-height 2)) 0)))
        (layer (car (gimp-layer-new image width (+ height (/ text-height 2)) RGB-IMAGE "bg" 100 LAYER-MODE-NORMAL-LEGACY)))
        (textfs)
        (layer2) 
    )
        
    (gimp-image-insert-layer image layer 0 0)
        
    (gimp-image-select-rectangle image CHANNEL-OP-ADD 0 (/ text-height 2) width height)
    (gimp-context-set-foreground '(255 255 255))
    (gimp-drawable-edit-fill layer FILL-FOREGROUND )
    
    (gimp-image-select-rectangle image CHANNEL-OP-REPLACE border-size (+ (/ text-height 2) border-size) (- width (* border-size 2)) (- height (* border-size 2)))
    (gimp-context-set-foreground '(0 0 0))
    (gimp-drawable-edit-fill layer FILL-FOREGROUND )
    
    (gimp-image-select-rectangle image CHANNEL-OP-REPLACE (* border-size 3) 0 text-width text-height)
    (gimp-drawable-edit-fill layer FILL-FOREGROUND )    
    
    (gimp-selection-none image)
    
    ;step 1
    (gimp-context-set-foreground '(255 255 255))
   
    (set! textfs (car (gimp-text-layer-new image text font fontsize PIXELS)))
    (gimp-image-insert-layer image textfs 0 0)   
    (gimp-layer-set-offsets textfs (* border-size 3) 0)
   
    (set! layer (car(gimp-image-merge-down image textfs CLIP-TO-BOTTOM-LAYER)))
   
    ;step 2   
    (plug-in-gauss-iir RUN-INTERACTIVE image layer 25 TRUE TRUE)
   
    ;step 3
    (gimp-drawable-levels layer HISTOGRAM-VALUE .18 .38 TRUE 1 0 1 TRUE)
   
    ;step 4   
    (plug-in-gauss-iir RUN-INTERACTIVE image layer 2 TRUE TRUE)

    ;step 5    
    (gimp-image-select-color image CHANNEL-OP-REPLACE layer '(0 0 0))
    (gimp-selection-invert image)

    ;step 6        
    (set! layer2 (car (gimp-layer-new image width (+ height (/ text-height 2)) RGB-IMAGE "2" 100 LAYER-MODE-NORMAL-LEGACY)))
    (gimp-image-insert-layer image layer2 0 0)

    ;step 7        
    (gimp-context-set-gradient gradient) 
    (gimp-edit-blend layer2 BLEND-CUSTOM LAYER-MODE-NORMAL-LEGACY GRADIENT-LINEAR 100 0 REPEAT-NONE 
        FALSE TRUE 5 .1 TRUE width 0 width (+ height (/ text-height 2)))
    
    ;step 8        
    (plug-in-bump-map RUN-NONINTERACTIVE image layer2 layer 120 25 7 5 5 0 0 TRUE FALSE 2)
   
    ;step 9       
    (gimp-curves-spline layer2 HISTOGRAM-VALUE 8 (color-curve))
            
    (gimp-image-scale image new-width (/ (* new-width (+ height (/ text-height 2))) width))
      
    (gimp-display-new image)
    (gimp-image-clean-all image)
    )
)]]>
        </programlisting>
        <para>
            A következő kodrészletben a felhasználó használhatja az általunk alapértelmezetté tett beálitásokat illetve lehetöséget biztosítunk neki, hogy más értékeket használjon.
        </para> 
        <programlisting><![CDATA[
(script-fu-register "script-fu-bhax-chrome-border"
    "Chrome3-Border2"
    "Creates a chrome effect on a given text."
    "Norbert Bátfai"
    "Copyright 2019, Norbert Bátfai"
    "January 19, 2019"
    ""
    SF-STRING       "Text"      "Rácz András István"
    SF-FONT         "Font"      "Sans"
    SF-ADJUSTMENT   "Font size" '(160 1 1000 1 10 0 1)
    SF-VALUE        "Width"     "1920"
    SF-VALUE        "Height"    "1080"
    SF-VALUE        "New width" "400"
    SF-COLOR        "Color"     '(255 0 0)
    SF-GRADIENT     "Gradient"  "Crown molding"    
    SF-VALUE        "Border size"   "7"    
)
(script-fu-menu-register "script-fu-bhax-chrome-border" 
    "<Image>/File/Create/BHAX"
) ]]>
        </programlisting>             
           
    </section>        

    <section>
        <title>Gimp Scheme Script-fu: név mandala</title>
        <para>
            Ebben a feladatban egy olyan scriptet kellet irjunk a GIMP-hez, amely egy névből mandalát készit.Ezt a kapott szöveg töbszöros elforgatásával tehetjük meg.Ennek megvalósítását szemlélteti a következö kód.
        </para>
        
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>  
<programlisting><![CDATA[
        (define (elem x lista)

    (if (= x 1) (car lista) (elem (- x 1) ( cdr lista ) ) )

)

(define (text-width text font fontsize)
(let*
    (
        (text-width 1)
    )
    (set! text-width (car (gimp-text-get-extents-fontname text fontsize PIXELS font)))    

    text-width
    )
)

(define (text-wh text font fontsize)
(let*
    (
        (text-width 1)
        (text-height 1)
    )
    ;;;
    (set! text-width (car (gimp-text-get-extents-fontname text fontsize PIXELS font)))    
    ;;; ved ki a lista 2. elemét
    (set! text-height (elem 2  (gimp-text-get-extents-fontname text fontsize PIXELS font)))    
    ;;;    
    
    (list text-width text-height)
    )
)


;(text-width "alma" "Sans" 100)

(define (script-fu-bhax-mandala text text2 font fontsize width height color gradient)
(let*
    (
        (image (car (gimp-image-new width height 0)))
        (layer (car (gimp-layer-new image width height RGB-IMAGE "bg" 100 LAYER-MODE-NORMAL-LEGACY)))
        (textfs)
        (text-layer)
        (text-width (text-width text font fontsize))
        ;;;
        (text2-width (car (text-wh text2 font fontsize)))
        (text2-height (elem 2 (text-wh text2 font fontsize)))
        ;;;
        (textfs-width)
        (textfs-height)
        (gradient-layer)
    )

    (gimp-image-insert-layer image layer 0 0)

    (gimp-context-set-foreground '(0 255 0))
    (gimp-drawable-fill layer FILL-FOREGROUND)
    (gimp-image-undo-disable image) 

    (gimp-context-set-foreground color)

    (set! textfs (car (gimp-text-layer-new image text font fontsize PIXELS)))
    (gimp-image-insert-layer image textfs 0 -1)
    (gimp-layer-set-offsets textfs (- (/ width 2) (/ text-width 2))  (/ height 2))
    (gimp-layer-resize-to-image-size textfs)

    (set! text-layer (car (gimp-layer-new-from-drawable textfs image)))
    (gimp-image-insert-layer image text-layer 0 -1)
    (gimp-item-transform-rotate-simple text-layer ROTATE-180 TRUE 0 0)
    (set! textfs (car(gimp-image-merge-down image text-layer CLIP-TO-BOTTOM-LAYER)))

    (set! text-layer (car (gimp-layer-new-from-drawable textfs image)))
    (gimp-image-insert-layer image text-layer 0 -1)
    (gimp-item-transform-rotate text-layer (/ *pi* 2) TRUE 0 0)
    (set! textfs (car(gimp-image-merge-down image text-layer CLIP-TO-BOTTOM-LAYER)))

    (set! text-layer (car (gimp-layer-new-from-drawable textfs image)))
    (gimp-image-insert-layer image text-layer 0 -1)
    (gimp-item-transform-rotate text-layer (/ *pi* 4) TRUE 0 0)
    (set! textfs (car(gimp-image-merge-down image text-layer CLIP-TO-BOTTOM-LAYER)))
    
    (set! text-layer (car (gimp-layer-new-from-drawable textfs image)))
    (gimp-image-insert-layer image text-layer 0 -1)
    (gimp-item-transform-rotate text-layer (/ *pi* 6) TRUE 0 0)
    (set! textfs (car(gimp-image-merge-down image text-layer CLIP-TO-BOTTOM-LAYER)))    
    
    (plug-in-autocrop-layer RUN-NONINTERACTIVE image textfs)
    (set! textfs-width (+ (car(gimp-drawable-width textfs)) 100))
    (set! textfs-height (+ (car(gimp-drawable-height textfs)) 100))
        
    (gimp-layer-resize-to-image-size textfs)
    
    (gimp-image-select-ellipse image CHANNEL-OP-REPLACE (- (- (/ width 2) (/ textfs-width 2)) 18) 
        (- (- (/ height 2) (/ textfs-height 2)) 18) (+ textfs-width 36) (+ textfs-height 36))
    (plug-in-sel2path RUN-NONINTERACTIVE image textfs)
        
    (gimp-context-set-brush-size 22)
    (gimp-edit-stroke textfs)
    
    (set! textfs-width (- textfs-width 70))
    (set! textfs-height (- textfs-height 70))
    
    (gimp-image-select-ellipse image CHANNEL-OP-REPLACE (- (- (/ width 2) (/ textfs-width 2)) 18) 
        (- (- (/ height 2) (/ textfs-height 2)) 18) (+ textfs-width 36) (+ textfs-height 36))
    (plug-in-sel2path RUN-NONINTERACTIVE image textfs)
        
    (gimp-context-set-brush-size 8)
    (gimp-edit-stroke textfs)
        
    (set! gradient-layer (car (gimp-layer-new image width height RGB-IMAGE "gradient" 100 LAYER-MODE-NORMAL-LEGACY)))
    
    (gimp-image-insert-layer image gradient-layer 0 -1)
    (gimp-image-select-item image CHANNEL-OP-REPLACE textfs)
    (gimp-context-set-gradient gradient) 
    (gimp-edit-blend gradient-layer BLEND-CUSTOM LAYER-MODE-NORMAL-LEGACY GRADIENT-RADIAL 100 0 
    REPEAT-TRIANGULAR FALSE TRUE 5 .1 TRUE (/ width 2) (/ height 2) (+ (+ (/ width 2) (/ textfs-width 2)) 8) (/ height 2))
    
    (plug-in-sel2path RUN-NONINTERACTIVE image textfs)

    (set! textfs (car (gimp-text-layer-new image text2 font fontsize PIXELS)))
    (gimp-image-insert-layer image textfs 0 -1)
    (gimp-message (number->string text2-height))
    (gimp-layer-set-offsets textfs (- (/ width 2) (/ text2-width 2)) (- (/ height 2) (/ text2-height 2)))
        
    ;(gimp-selection-none image)
    ;(gimp-image-flatten image)
    
    (gimp-display-new image)
    (gimp-image-clean-all image)
    )
)



(script-fu-register "script-fu-bhax-mandala"
    "Mandala9"
    "Creates a mandala from a text box."
    "Norbert Bátfai"
    "Copyright 2019, Norbert Bátfai"
    "January 9, 2019"
    ""
    SF-STRING       "Text"      "Rácz Andras István"
    SF-STRING       "Text2"     "BHAX"
    SF-FONT         "Font"      "Sans"
    SF-ADJUSTMENT   "Font size" '(100 1 1000 1 10 0 1)
    SF-VALUE        "Width"     "1000"
    SF-VALUE        "Height"    "1000"
    SF-COLOR        "Color"     '(255 0 0)
    SF-GRADIENT     "Gradient"  "Deep Sea"
)
(script-fu-menu-register "script-fu-bhax-mandala" 
    "<Image>/File/Create/BHAX"
) ]]>
        </programlisting>          
    </section>        

</chapter>                
