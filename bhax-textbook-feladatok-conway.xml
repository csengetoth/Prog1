<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Conway!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Hangyaszimulációk</title>
        <para>
            Ebben a feladatban a hangya szimulácival fogunk foglalkozni.A szimulció, ahogy a nevéből is kitalálhatjuk a hangyákkal kapcsolatos, méghozzá a hangyák azon tulajdonságával kapcsolatos, hogy két pont között mindig megkeresik a legoptimálisabb utvonalat és miután megtalálták csak azt fogják használni. A mi programunk is ezt fogja csinálni. A mi esetunkben a kis pontok lesznek a hangyák amelyek először a különböző pontokba különbőző utakon fognak eljutni.Egy kis idő után azonban észrevehetjük, hogy egy-egy pontba már csak egy vonalon fognak haladni a hangyáink.Ez azt jelenti, hogy megtalálták a legrövidebb utat az adott pontba.
        </para>
        <mediaobject>
                <imageobject>
                    <imagedata fileref="source/hangya.png" scale="50" />
                </imageobject>
            </mediaobject>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/AndrasIstvanRacz/Prog1/tree/master/P_K%C3%B6nyv/source/Conway/Myrmecologist"></link>               
        </para>       
    </section>        
    <section>
        <title>Java életjáték</title>
        <para>
            Ebben a feladatban a John Conway-féle életjátékot kellet megvalósitsuk egy java programban azon belül is a sikló-kilövőt.
        </para>
        <para> </para>
        <para>
        	John Conway, a Cambridge Egyetem egyik matematikusa találta ki az életjátékot.Ez matematikai szempontból az úgynevezet sejtautómaták közé tartozik (Az olyan diszkrét modelleket, amiket a számelméletben mikrostruktúrák modellezésére használnak sejtautomatáknak nevezzük).A program egy négyzetrácsot fog megjeleníteni.A négyzetrács fekete cellákat sejteknek nevezzük.Egy cellához legközelebb lévő 8 cellát a cella környezetének nevezzük.Az életjáték körökre van osztva.Az első körben elhelyezünk tetszőleges számú sejtet.Ez után a játékosnak nincs beleszólása a játékmenetbe.Egy sejttel ezután három dolog történhet: 
        </para>

        <para>
        	1) A sejt túléli a kört, ha két vagy három szomszédja van.
        </para>
        <para> </para>
        <para>
        	2) A sejt elpusztul, ha kettőnél kevesebb (elszigetelődés), vagy háromnál több (túlnépesedés) szomszédja van.
        </para>
        <para> </para>
        <para>
        	3) Új sejt születik minden olyan cellában, melynek környezetében pontosan három sejt található.
        </para>
        <para>
        	Fontos, hogy ezek a változások csak kör végén következnek be.Ez azt jelenti, hogy az elhalálozók nem befolyásolják a túlélést és a születéseket illetve a születök sem befolyásolják az elhalálozókat.
        </para> 
        <para>
        	Az életjáték eredményezhet speciális alakztokat (alkzatoknak nevezzük a sejtek egy halmazát), ezek közül mi a sikló-kilövővel fogunk foglalkozni.Ennek az az érdekesége, hogy négy fázis után önmagába alakul vissza miközben egy kockányit mindig elmozdul,tehát átlos mozgásal végez.Ez az alakzat a hackerek hivatalos emblémája is.
        </para>
        <para> </para>

        <programlisting><![CDATA[
public class Sejtautomata extends java.awt.Frame implements Runnable {
public static final boolean ÉLŐ = true;
public static final boolean HALOTT = false;
protected boolean [][][] rácsok = new boolean [2][][];
protected boolean [][] rács;
protected int rácsIndex = 0;
protected int cellaSzélesség = 20;
protected int cellaMagasság = 20;
protected int szélesség = 20;
protected int magasság = 10;
protected int várakozás = 1000;
private java.awt.Robot robot;
private boolean pillanatfelvétel = false;
private static int pillanatfelvételSzámláló = 0;

public Sejtautomata(int szélesség, int magasság) {
        this.szélesség = szélesség;
        this.magasság = magasság;
        rácsok[0] = new boolean[magasság][szélesség];
        rácsok[1] = new boolean[magasság][szélesség];
        rácsIndex = 0;
        rács = rácsok[rácsIndex];
        for(int i=0; i<rács.length; ++i)
            for(int j=0; j<rács[0].length; ++j)
                rács[i][j] = HALOTT;
        siklóKilövő(rács, 5, 60);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent e) {
                setVisible(false);
                System.exit(0);
        }
});

addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent e) {
                if(e.getKeyCode() == java.awt.event.KeyEvent.VK_K) {
                    cellaSzélesség /= 2;
                    cellaMagasság /= 2;
                    setSize(Sejtautomata.this.szélesség*cellaSzélesség,
                            Sejtautomata.this.magasság*cellaMagasság);
                    validate();
            } else if(e.getKeyCode() == java.awt.event.KeyEvent.VK_N) {
                    cellaSzélesség *= 2;
                    cellaMagasság *= 2;
                    setSize(Sejtautomata.this.szélesség*cellaSzélesség,
                            Sejtautomata.this.magasság*cellaMagasság);
                    validate();
            } else if(e.getKeyCode() == java.awt.event.KeyEvent.VK_S)
                    pillanatfelvétel = !pillanatfelvétel;
                else if(e.getKeyCode() == java.awt.event.KeyEvent.VK_G)
                    várakozás /= 2;
                else if(e.getKeyCode() == java.awt.event.KeyEvent.VK_L)
                    várakozás *= 2;
                repaint();
        }
});

addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent m) {
                int x = m.getX()/cellaSzélesség;
                int y = m.getY()/cellaMagasság;
                rácsok[rácsIndex][y][x] = !rácsok[rácsIndex][y][x];
                repaint();
    }
});

addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent m) {
                int x = m.getX()/cellaSzélesség;
                int y = m.getY()/cellaMagasság;
                rácsok[rácsIndex][y][x] = ÉLŐ;
                repaint();
    }
});

cellaSzélesség = 10;
cellaMagasság = 10;
try {
            robot = new java.awt.Robot(
                    java.awt.GraphicsEnvironment.
                    getLocalGraphicsEnvironment().
                    getDefaultScreenDevice());
    } catch(java.awt.AWTException e) {
            e.printStackTrace();
}

setTitle("Sejtautomata");
setResizable(false);
setSize(szélesség*cellaSzélesség,
                magasság*cellaMagasság);
setVisible(true);
new Thread(this).start();
}

public void paint(java.awt.Graphics g) {
        boolean [][] rács = rácsok[rácsIndex];
        for(int i=0; i<rács.length; ++i) {
            for(int j=0; j<rács[0].length; ++j) {
                if(rács[i][j] == ÉLŐ)
                    g.setColor(java.awt.Color.BLACK);
                else
                    g.setColor(java.awt.Color.WHITE);
                g.fillRect(j*cellaSzélesség, i*cellaMagasság,
                        cellaSzélesség, cellaMagasság);
                g.setColor(java.awt.Color.LIGHT_GRAY);
                g.drawRect(j*cellaSzélesség, i*cellaMagasság,
                        cellaSzélesség, cellaMagasság);
    }
}

        if(pillanatfelvétel) {
            pillanatfelvétel = false;
            pillanatfelvétel(robot.createScreenCapture
                    (new java.awt.Rectangle
                    (getLocation().x, getLocation().y,
                    szélesség*cellaSzélesség,
                    magasság*cellaMagasság)));
    }
}

public int szomszédokSzáma(boolean [][] rács,
            int sor, int oszlop, boolean állapot) {        
        int állapotúSzomszéd = 0;
        for(int i=-1; i<2; ++i)
            for(int j=-1; j<2; ++j)
                if(!((i==0) && (j==0))) {
            int o = oszlop + j;
            if(o < 0)
                o = szélesség-1;
            else if(o >= szélesség)
                o = 0;
            
            int s = sor + i;
            if(s < 0)
                s = magasság-1;
            else if(s >= magasság)
                s = 0;
            
            if(rács[s][o] == állapot)
                ++állapotúSzomszéd;
                }
        
        return állapotúSzomszéd;
}

public void időFejlődés() {
        
        boolean [][] rácsElőtte = rácsok[rácsIndex];
        boolean [][] rácsUtána = rácsok[(rácsIndex+1)%2];
        
        for(int i=0; i<rácsElőtte.length; ++i) {
            for(int j=0; j<rácsElőtte[0].length; ++j) {
                
                int élők = szomszédokSzáma(rácsElőtte, i, j, ÉLŐ);
                
                if(rácsElőtte[i][j] == ÉLŐ) {

                    if(élők==2 || élők==3)
                        rácsUtána[i][j] = ÉLŐ;
                    else
                        rácsUtána[i][j] = HALOTT;
        }  else {

                    if(élők==3)
                        rácsUtána[i][j] = ÉLŐ;
                    else
                        rácsUtána[i][j] = HALOTT;
            }
        }
    }
        rácsIndex = (rácsIndex+1)%2;
}

public void run() {
        
        while(true) {
            try {
                Thread.sleep(várakozás);
            } catch (InterruptedException e) {}
            
            időFejlődés();
            repaint();
        }
}

public void sikló(boolean [][] rács, int x, int y) {
        
        rács[y+ 0][x+ 2] = ÉLŐ;
        rács[y+ 1][x+ 1] = ÉLŐ;
        rács[y+ 2][x+ 1] = ÉLŐ;
        rács[y+ 2][x+ 2] = ÉLŐ;
        rács[y+ 2][x+ 3] = ÉLŐ;
        
}
   
public void siklóKilövő(boolean [][] rács, int x, int y) {
        
        rács[y+ 6][x+ 0] = ÉLŐ;
        rács[y+ 6][x+ 1] = ÉLŐ;
        rács[y+ 7][x+ 0] = ÉLŐ;
        rács[y+ 7][x+ 1] = ÉLŐ;
        
        rács[y+ 3][x+ 13] = ÉLŐ;
        
        rács[y+ 4][x+ 12] = ÉLŐ;
        rács[y+ 4][x+ 14] = ÉLŐ;
        
        rács[y+ 5][x+ 11] = ÉLŐ;
        rács[y+ 5][x+ 15] = ÉLŐ;
        rács[y+ 5][x+ 16] = ÉLŐ;
        rács[y+ 5][x+ 25] = ÉLŐ;
        
        rács[y+ 6][x+ 11] = ÉLŐ;
        rács[y+ 6][x+ 15] = ÉLŐ;
        rács[y+ 6][x+ 16] = ÉLŐ;
        rács[y+ 6][x+ 22] = ÉLŐ;
        rács[y+ 6][x+ 23] = ÉLŐ;
        rács[y+ 6][x+ 24] = ÉLŐ;
        rács[y+ 6][x+ 25] = ÉLŐ;
        
        rács[y+ 7][x+ 11] = ÉLŐ;
        rács[y+ 7][x+ 15] = ÉLŐ;
        rács[y+ 7][x+ 16] = ÉLŐ;
        rács[y+ 7][x+ 21] = ÉLŐ;
        rács[y+ 7][x+ 22] = ÉLŐ;
        rács[y+ 7][x+ 23] = ÉLŐ;
        rács[y+ 7][x+ 24] = ÉLŐ;
        
        rács[y+ 8][x+ 12] = ÉLŐ;
        rács[y+ 8][x+ 14] = ÉLŐ;
        rács[y+ 8][x+ 21] = ÉLŐ;
        rács[y+ 8][x+ 24] = ÉLŐ;
        rács[y+ 8][x+ 34] = ÉLŐ;
        rács[y+ 8][x+ 35] = ÉLŐ;
        
        rács[y+ 9][x+ 13] = ÉLŐ;
        rács[y+ 9][x+ 21] = ÉLŐ;
        rács[y+ 9][x+ 22] = ÉLŐ;
        rács[y+ 9][x+ 23] = ÉLŐ;
        rács[y+ 9][x+ 24] = ÉLŐ;
        rács[y+ 9][x+ 34] = ÉLŐ;
        rács[y+ 9][x+ 35] = ÉLŐ;
        
        rács[y+ 10][x+ 22] = ÉLŐ;
        rács[y+ 10][x+ 23] = ÉLŐ;
        rács[y+ 10][x+ 24] = ÉLŐ;
        rács[y+ 10][x+ 25] = ÉLŐ;
        
        rács[y+ 11][x+ 25] = ÉLŐ;
        
}

public void pillanatfelvétel(java.awt.image.BufferedImage felvetel) {
        StringBuffer sb = new StringBuffer();
        sb = sb.delete(0, sb.length());
        sb.append("sejtautomata");
        sb.append(++pillanatfelvételSzámláló);
        sb.append(".png");
        try {
            javax.imageio.ImageIO.write(felvetel, "png",
                    new java.io.File(sb.toString()));
        } catch(java.io.IOException e) {
            e.printStackTrace();
        }
}
  
public void update(java.awt.Graphics g) {
        paint(g);
}    
  
public static void main(String[] args) {
        new Sejtautomata(100, 75);
    }
}]]>
            </programlisting>

                   
    </section>        
    <section>
        <title>Qt C++ életjáték</title>
        <para>
            Ebben a feladatban is John Conway életjátékát fogjuk megvalósítani, csak ezutal C++-ban Qt gui segitségével.A progam müködési elve úgyan az, illetve a szabályok is megegyeznek az elöző feladatban lévökkel.
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/AndrasIstvanRacz/Prog1/tree/master/P_K%C3%B6nyv/source/Conway/Gol_Qt_C%2B%2B"></link>          
        </para>        
    </section>        
    <section>
        <title>BrainB Benchmark</title>
        <para>
        </para>
        <para>
            Ebben a feladatban a Brain Benchmarkkal kellett foglalkoznunk, ami az agy koncetrációs késégét méri.A Brain Benchmark meghatároza, hogy az agyunk milyen gyorsan képes reagálni, menyire képes összpontosítanni egy adott feladatra illetve teszteli a memóriát.Az áltaunk használt program ezt úgy teszi meg, hogy a képernyőn megjelenit kis négyzeteket bennük egy körrel.A felhasználó feladata az, hogy válaszon egyet a négyzetek közül és a benne lévö körre kattintson, és nyomva tartvva az egeret kövese azt. Eközben újabb és újabb négyzetek fognak megjelenni.Abban az esetben ha az egeret elengedjük vagy az általunk kiválasztott kört elveszitjük a négyzetek elkezdenek eltünni.A program ezen a datok alapján ki fogja számolni a reakcióidőnket.Ez az esprtolok körében eléggé elterjedt mivel azon a területen fontos, hogy az agy a lehető leggyorsabban reagáljon. 
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/AndrasIstvanRacz/Prog1/tree/master/P_K%C3%B6nyv/source/Conway/BrainB"></link>               
        </para>           
    </section>        
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
</chapter>                
